<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: toit/model/device.proto

namespace Toit\Model\DeviceHealth\Power;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>toit.model.DeviceHealth.Power.Value</code>
 */
class Value extends \Google\Protobuf\Internal\Message
{
    protected $power;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type float $battery
     *     @type \Google\Protobuf\GPBEmpty $pluggedin
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Toit\Model\Device::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>double battery = 1;</code>
     * @return float
     */
    public function getBattery()
    {
        return $this->readOneof(1);
    }

    public function hasBattery()
    {
        return $this->hasOneof(1);
    }

    /**
     * Generated from protobuf field <code>double battery = 1;</code>
     * @param float $var
     * @return $this
     */
    public function setBattery($var)
    {
        GPBUtil::checkDouble($var);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.google.protobuf.Empty pluggedin = 2;</code>
     * @return \Google\Protobuf\GPBEmpty|null
     */
    public function getPluggedin()
    {
        return $this->readOneof(2);
    }

    public function hasPluggedin()
    {
        return $this->hasOneof(2);
    }

    /**
     * Generated from protobuf field <code>.google.protobuf.Empty pluggedin = 2;</code>
     * @param \Google\Protobuf\GPBEmpty $var
     * @return $this
     */
    public function setPluggedin($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\GPBEmpty::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getPower()
    {
        return $this->whichOneof("power");
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Value::class, \Toit\Model\DeviceHealth_Power_Value::class);


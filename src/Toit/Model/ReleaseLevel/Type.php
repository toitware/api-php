<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: toit/model/program.proto

namespace Toit\Model\ReleaseLevel;

use UnexpectedValueException;

/**
 * Protobuf type <code>toit.model.ReleaseLevel.Type</code>
 */
class Type
{
    /**
     * Generated from protobuf enum <code>UNKNOWN = 0;</code>
     */
    const UNKNOWN = 0;
    /**
     * Generated from protobuf enum <code>RELEASED = 10;</code>
     */
    const RELEASED = 10;
    /**
     * Generated from protobuf enum <code>BETA = 20;</code>
     */
    const BETA = 20;
    /**
     * Generated from protobuf enum <code>ALPHA = 30;</code>
     */
    const ALPHA = 30;
    /**
     * Generated from protobuf enum <code>EDGE = 40;</code>
     */
    const EDGE = 40;
    /**
     * Generated from protobuf enum <code>LATEST = 50;</code>
     */
    const LATEST = 50;
    /**
     * Generated from protobuf enum <code>ALL = 255;</code>
     */
    const ALL = 255;

    private static $valueToName = [
        self::UNKNOWN => 'UNKNOWN',
        self::RELEASED => 'RELEASED',
        self::BETA => 'BETA',
        self::ALPHA => 'ALPHA',
        self::EDGE => 'EDGE',
        self::LATEST => 'LATEST',
        self::ALL => 'ALL',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Type::class, \Toit\Model\ReleaseLevel_Type::class);

